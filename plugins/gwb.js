const { cmd } = require('../command'), sensitiveData = require('../dila_md_licence/a/b/c/d/dddamsbs'), fs = require('fs'), WelcomeSettings = { welcomeEnabled: false, welcomeAlertEnabled: false, welcomeMessages: {}, listenerRegistered: false }, loadWelcomeMessages = () => fs.existsSync('./data/welcomeMessages.json') ? WelcomeSettings.welcomeMessages = JSON.parse(fs.readFileSync('./data/welcomeMessages.json')) : WelcomeSettings.welcomeMessages = {}, saveWelcomeMessages = () => fs.writeFileSync('./data/welcomeMessages.json', JSON.stringify(WelcomeSettings.welcomeMessages, null, 2)), sendWelcomeMessage = async (conn, groupId, participants) => { const groupMetadata = await conn.groupMetadata(groupId), groupName = groupMetadata.subject, mentions = participants.map(participant => participant), welcomeText = WelcomeSettings.welcomeMessages[groupId] || 'Welcome to the group!', welcomeMessage = `ùóõùó≤ùòÜ ‚ô•Ô∏èü´Ç\n${mentions.map(memberId => `@${memberId.split('@')[0]}`).join('\n')}\nùó™ùó≤ùóπùó∞ùóºùó∫ùó≤ ùòÅùóº *${groupName}* üéâ\nÀ¢·µâ·µâ ·µç ≥·µí·µò·µñ ·µà·µâÀ¢·∂ú ≥‚Å±·µñ·µó‚Å±·µí‚Åø\n\n${sensitiveData.footerText}`; await conn.sendMessage(groupId, { text: welcomeMessage, mentions }); }, sendPrivateWelcomeAlert = async (conn, groupId, memberId) => { const groupMetadata = await conn.groupMetadata(groupId), groupName = groupMetadata.subject, groupDescription = groupMetadata.desc || 'No description available', privateAlertMessage = `ùóõùó≤ùòÜ @${memberId.split('@')[0]},\nùó™ùó≤ùóπùó∞ùóºùó∫ùó≤ ùòÅùóº *${groupName}* üéâ\nùó•ùó≤ùóÆùó± ùòÅùóµùó∂ùòÄ : ${groupDescription}\n${sensitiveData.footerText}`; await conn.sendMessage(memberId, { text: privateAlertMessage, mentions: [memberId] }); }, registerGroupWelcomeListener = conn => { if (WelcomeSettings.listenerRegistered) return; WelcomeSettings.listenerRegistered = true; conn.ev.on('group-participants.update', async update => { const { id, participants, action } = update; if (action === 'add') { WelcomeSettings.welcomeEnabled && await sendWelcomeMessage(conn, id, participants); WelcomeSettings.welcomeAlertEnabled && participants.forEach(async participant => await sendPrivateWelcomeAlert(conn, id, participant)); } }); }; cmd({ pattern: "welcomeon", react: "üéâ", desc: "Enable welcome messages for new group members", category: "group", use: '.welcomeon', filename: __filename }, async (conn, mek, m, { from, isGroup, isBotAdmins, isAdmins, reply }) => { try { if (!isGroup) return reply('This command can only be used in a group. üö´'); if (!isBotAdmins) return reply('Bot must be an admin to use this command. ü§ñ'); if (!isAdmins) return reply('Only admins can use this command. üëÆ‚Äç‚ôÇÔ∏è'); WelcomeSettings.welcomeEnabled = true; registerGroupWelcomeListener(conn); reply('Group welcome messages have been enabled! üéâ'); } catch (e) { reply('Error enabling welcome messages. ‚ö†Ô∏è'); console.log(e); } }), cmd({ pattern: "welcomeoff", react: "‚ùå", desc: "Disable welcome messages for new group members", category: "group", use: '.welcomeoff', filename: __filename }, async (conn, mek, m, { from, isGroup, isBotAdmins, isAdmins, reply }) => { try { if (!isGroup) return reply('This command can only be used in a group. üö´'); if (!isBotAdmins) return reply('Bot must be an admin to use this command. ü§ñ'); if (!isAdmins) return reply('Only admins can use this command. üëÆ‚Äç‚ôÇÔ∏è'); WelcomeSettings.welcomeEnabled = false; reply('Group welcome messages have been disabled! ‚ùå'); } catch (e) { reply('Error disabling welcome messages. ‚ö†Ô∏è'); console.log(e); } }), cmd({ pattern: "welcomealerton", react: "üîî", desc: "Enable welcome alerts for new group members", category: "group", use: '.welcomealerton', filename: __filename }, async (conn, mek, m, { from, isGroup, isBotAdmins, isAdmins, reply }) => { try { if (!isGroup) return reply('This command can only be used in a group. üö´'); if (!isBotAdmins) return reply('Bot must be an admin to use this command. ü§ñ'); if (!isAdmins) return reply('Only admins can use this command. üëÆ‚Äç‚ôÇÔ∏è'); WelcomeSettings.welcomeAlertEnabled = true; registerGroupWelcomeListener(conn); reply('Private welcome alerts have been enabled! üîî'); } catch (e) { reply('Error enabling welcome alerts. ‚ö†Ô∏è'); console.log(e); } }), cmd({ pattern: "welcomealertoff", react: "üîï", desc: "Disable welcome alerts for new group members", category: "group", use: '.welcomealertoff', filename: __filename }, async (conn, mek, m, { from, isGroup, isBotAdmins, isAdmins, reply }) => { try { if (!isGroup) return reply('This command can only be used in a group. üö´'); if (!isBotAdmins) return reply('Bot must be an admin to use this command. ü§ñ'); if (!isAdmins) return reply('Only admins can use this command. üëÆ‚Äç‚ôÇÔ∏è'); WelcomeSettings.welcomeAlertEnabled = false; reply('Private welcome alerts have been disabled! üîï'); } catch (e) { reply('Error disabling welcome alerts. ‚ö†Ô∏è'); console.log(e); } }), cmd({ pattern: "welcomemsg (.*)", react: "‚úçÔ∏è", desc: "Set a custom welcome message for the group", category: "group", use: '.welcomemsg {TEXT}', filename: __filename }, async (conn, mek, m, { from, isGroup, isBotAdmins, isAdmins, reply }) => { try { if (!isGroup) return reply('This command can only be used in a group. üö´'); if (!isBotAdmins) return reply('Bot must be an admin to use this command. ü§ñ'); if (!isAdmins) return reply('Only admins can use this command. üëÆ‚Äç‚ôÇÔ∏è'); const message = m.matches[1]; WelcomeSettings.welcomeMessages[from] = message; saveWelcomeMessages(); reply(`Custom welcome message set! üéâ\n\n${message}`); } catch (e) { reply('Error setting custom welcome message. ‚ö†Ô∏è'); console.log(e); } }); cmd({ pattern: "welcomemsg", react: "üìú", desc: "Display the current welcome message for the group", category: "group", use: '.welcomemsg', filename: __filename }, async (conn, mek, m, { from, isGroup, reply }) => { try { if (!isGroup) return reply('This command can only be used in a group. üö´'); const message = WelcomeSettings.welcomeMessages[from] || 'No custom welcome message set.'; reply(`Current welcome message for the group:\n\n${message}`); } catch (e) { reply('Error displaying welcome message. ‚ö†Ô∏è'); console.log(e); } }); cmd({ pattern: "welcomedel", react: "üóëÔ∏è", desc: "Delete the custom welcome message for the group", category: "group", use: '.welcomedel', filename: __filename }, async (conn, mek, m, { from, isGroup, isBotAdmins, isAdmins, reply }) => { try { if (!isGroup) return reply('This command can only be used in a group. üö´'); if (!isBotAdmins) return reply('Bot must be an admin to use this command. ü§ñ'); if (!isAdmins) return reply('Only admins can use this command. üëÆ‚Äç‚ôÇÔ∏è'); delete WelcomeSettings.welcomeMessages[from]; saveWelcomeMessages(); reply('Custom welcome message has been deleted! üóëÔ∏è'); } catch (e) { reply('Error deleting custom welcome message. ‚ö†Ô∏è'); console.log(e); } }); cmd({ pattern: "welcomestates", react: "üîç", desc: "Display current welcome settings for the group", category: "group", use: '.welcomestates', filename: __filename }, async (conn, mek, m, { from, isGroup, reply }) => { try { if (!isGroup) return reply('This command can only be used in a group. üö´'); const welcomeStatus = WelcomeSettings.welcomeEnabled ? 'Enabled' : 'Disabled'; const alertStatus = WelcomeSettings.welcomeAlertEnabled ? 'Enabled' : 'Disabled'; const customMessage = WelcomeSettings.welcomeMessages[from] ? WelcomeSettings.welcomeMessages[from] : 'No custom message set.'; reply(`Current welcome settings for the group:\n\nWelcome Messages: ${welcomeStatus}\nPrivate Alerts: ${alertStatus}\nCustom Welcome Message: ${customMessage}`); } catch (e) { reply('Error displaying welcome settings. ‚ö†Ô∏è'); console.log(e); } }); cmd({ pattern: "welcome", react: "üëë", desc: "Display group welcome commands", category: "group", use: '.welcome', filename: __filename }, async (conn, mek, m, { from, isGroup, reply }) => { try { if (!isGroup) return reply('This command can only be used in a group. üö´'); const welcomeInfo = `üëë ùóóùóúùóüùóî ùó†ùóó ùóöùó•ùó¢ùó®ùó£ ùó™ùóòùóüùóñùó¢ùó†ùóò üëë\n\n‚ú® ùöÜùöéùöïùöåùöòùöñùöé ùöòùöó ‚ú®\n> _‡∑É‡∂∏‡∑ñ‡∑Ñ‡∂∫ ‡∂≠‡∑î‡∂Ω ‡∑Ä‡∑ô‡∂Ω‡∑ä‡∂ö‡∂∏‡∑ä ‡∂∏‡∑ê‡∑É‡∑ö‡∂¢‡∑ä ‡∂ë‡∂ö ùöòùöó ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∂∫ ‡∂±‡∂∏‡∑ä..._\n üí† \`.welcomeon\`\n\nüåë ùöÜùöéùöïùöåùöòùöñùöé ùöòùöèùöè üåë\n> _‡∑É‡∂∏‡∑ñ‡∑Ñ‡∂∫ ‡∂≠‡∑î‡∂Ω ‡∑Ä‡∑ô‡∂Ω‡∑ä‡∂ö‡∂∏‡∑ä ‡∂∏‡∑ê‡∑É‡∑ö‡∂¢‡∑ä ‡∂ë‡∂ö off ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∂∫ ‡∂±‡∂∏‡∑ä..._\n üí† \`.welcomeoff\`\n\nüì¨ ùöÜùöéùöïùöåùöòùöñùöé ùöäùöïùöéùöõùöù ùôæùôΩ üì¨\n> _‡∑É‡∂∏‡∑ñ‡∑Ñ‡∂∫ ‡∂≠‡∑î‡∂Ω‡∂ß ‡∂¥‡∑ê‡∂∏‡∑í‡∂±‡∑ô‡∂± ‡∂±‡∑Ä‡∂ö‡∂∫‡∂±‡∑ä ‡∑Ñ‡∂ß inbox alert ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂∏‡∂ú‡∑í‡∂±‡∑ä ‡∑É‡∂∏‡∑ñ‡∑Ñ‡∂∫‡∑ö ‡∂±‡∑ì‡∂≠‡∑í ‡∂ª‡∑ì‡∂≠‡∑í ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∂±‡∂∏‡∑ä..._\n üí† \`.welcomealerton\`\n\nüì™ ùöÜùöéùöïùöåùöòùöñùöé ùöäùöïùöéùöõùöù ùôæùôµùôµ üì™\n> _‡∑É‡∂∏‡∑ñ‡∑Ñ‡∂∫ ‡∂≠‡∑î‡∂Ω‡∂ß ‡∂¥‡∑ê‡∂∏‡∑í‡∂±‡∑ô‡∂± ‡∂±‡∑Ä‡∂ö‡∂∫‡∂±‡∑ä ‡∑Ñ‡∂ß inbox alert ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂∏‡∂ú‡∑í‡∂±‡∑ä ‡∑É‡∂∏‡∑ñ‡∑Ñ‡∂∫‡∑ö ‡∂±‡∑ì‡∂≠‡∑í ‡∂ª‡∑ì‡∂≠‡∑í ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂Ö‡∂±‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∂±‡∂∏‡∑ä..._\n üí† \`.welcomealertoff\`\n\nüìù ùô≤ùöëùöäùöóùöêùöé ùö†ùöéùöïùöåùöòùöñùöé ùôºùöÇùô∂ üìù\n> _‡∂î‡∂∂‡∑ö ‡∑Ñ‡∑í‡∂≠‡∑î‡∂∏‡∂±‡∑è‡∂¥‡∑ô‡∂ß ‡∂î‡∂∂ ‡∂ö‡∑ê‡∂∏‡∂≠‡∑í welcome msg ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ø‡∑è‡∂ú‡∂≠ ‡∑Ñ‡∑ê‡∂ö‡∑í‡∂∫..._\n üí† \`.welcomemsg (text)\`\n\nüßê ùô∂ùöõùöòùöûùöô ùö†ùöéùöïùöåùöòùöñùöé ùöúùöùùöäùöùùöûùöú üßê\n> _‡∂Ø‡∑ê‡∂±‡∂ß ‡∑É‡∂∏‡∑ñ‡∑Ñ‡∂∫ ‡∂≠‡∑î‡∑Ö ‡∂¥‡∑Ä‡∂≠‡∑í‡∂± ‡∑Ä‡∑ô‡∂Ω‡∑ä‡∂ö‡∂∏‡∑ä ‡∂≠‡∂≠‡∑ä‡∂≠‡∑ä‡∑Ä‡∂∫..._\n üí† \`.welcomestates\`\n\n${sensitiveData.footerText}`; reply(welcomeInfo); } catch (e) { reply('Error displaying welcome information. ‚ö†Ô∏è'); console.log(e); } });
